{
	"name": "pipeline1",
	"properties": {
		"activities": [
			{
				"name": "Delete old files",
				"type": "Delete",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_for_delete",
						"type": "DatasetReference",
						"parameters": {
							"foldername": "csvfiles"
						}
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			},
			{
				"name": "Execute Pipeline move data from sql to blob",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Append variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "move data from sql to blob",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Append variable1",
				"type": "AppendVariable",
				"dependsOn": [
					{
						"activity": "Delete old files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "items",
					"value": {
						"value": "\"ADF\"",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Execute Pipeline move data from sql to blob",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "newitem",
					"value": {
						"value": "@variables('items')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If Condition1",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set variable2",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('filename'),'')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Copy data1",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "AzureSqlSink"
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "AddressID",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "AddressID",
												"type": "Int32",
												"physicalType": "int"
											}
										},
										{
											"source": {
												"name": "AddressLine1",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "AddressLine1",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "AddressLine2",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "AddressLine2",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "City",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "City",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "StateProvince",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "StateProvince",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "CountryRegion",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "CountryRegion",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "PostalCode",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "PostalCode",
												"type": "String",
												"physicalType": "nvarchar"
											}
										},
										{
											"source": {
												"name": "rowguid",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "rowguid",
												"type": "Guid",
												"physicalType": "uniqueidentifier"
											}
										},
										{
											"source": {
												"name": "ModifiedDate",
												"type": "String",
												"physicalType": "String"
											},
											"sink": {
												"name": "ModifiedDate",
												"type": "DateTime",
												"physicalType": "datetime"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_flatfile_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"filename": {
											"value": "@variables('filename')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_azuresqltable",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "Get Metadata1",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_flatfile_dynamic",
						"type": "DatasetReference",
						"parameters": {
							"filename": {
								"value": "@concat('Address_FromFactory_',  substring(utcnow(),0,10)  ,'.csv')",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"itemName"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Set variable2",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Metadata1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "filename",
					"value": {
						"value": "@activity('Get Metadata1').output.itemname",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"items": {
				"type": "Array",
				"defaultValue": [
					"SSIS",
					"SSAS",
					"PowerBI"
				]
			},
			"newitem": {
				"type": "Array"
			},
			"filename": {
				"type": "String"
			}
		},
		"folder": {
			"name": "BLOB_TO_DB"
		},
		"annotations": [],
		"lastPublishTime": "2021-06-04T02:46:22Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}